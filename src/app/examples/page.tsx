'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { 
  Search, 
  Code, 
  Copy, 
  ExternalLink, 
  PlayCircle, 
  BookOpen, 
  Zap, 
  Globe, 
  FileText,
  Check,
  ChevronRight,
  Sparkles,
  Eye,
  Terminal
} from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'

const exampleCategories = [
  { id: 'all', name: 'All Examples', count: 4, icon: BookOpen },
  { id: 'basic', name: 'Basic Tests', count: 2, icon: Globe },
  { id: 'forms', name: 'Form Testing', count: 1, icon: FileText },
  { id: 'ai-generated', name: 'AI Generated', count: 1, icon: Zap }
]

const codeExamples = [
  {
    id: 1,
    title: 'Simple Page Test',
    description: 'Basic test generated by Raiken AI to verify page elements are visible.',
    category: 'basic',
    difficulty: 'Beginner',
    tags: ['page', 'visibility', 'basic'],
    language: 'typescript',
    featured: true,
    userInput: `{
  "type": "ui-test",
  "name": "Simple Page Test",
  "description": "Test that the page loads and shows the user information text",
  "steps": [
    {
      "action": "navigate",
      "url": "http://localhost:3002"
    }
  ],
  "assertions": [
    {
      "type": "element",
      "selector": "text",
      "condition": "User Information text should be visible",
      "text": "User Information"
    }
  ]
}`,
    code: `import { test, expect } from "@playwright/test";

test("simple test 1", async ({ page }) => {
  await page.goto("http://localhost:3002");
  await expect(page.getByText("User Information")).toBeVisible();
});`
  },
  {
    id: 2,
    title: 'Contact Form Test',
    description: 'AI-generated test for a landing page contact form interaction.',
    category: 'forms',
    difficulty: 'Intermediate',
    tags: ['forms', 'contact', 'ai-generated'],
    language: 'typescript',
    featured: true,
    userInput: `{
  "type": "ui-test",
  "name": "Wakiti Contact Form Test",
  "description": "Test the contact form functionality on the Wakiti landing page including form validation and submission",
  "steps": [
    {
      "action": "navigate",
      "url": "https://wakiti.com"
    },
    {
      "action": "wait",
      "ms": 2000
    },
    {
      "action": "click",
      "element": "button",
      "selector": "contact-us-btn"
    },
    {
      "action": "type",
      "element": "input",
      "value": "John Doe",
      "name": "name"
    },
    {
      "action": "type", 
      "element": "input",
      "value": "john.doe@example.com",
      "type": "email"
    },
    {
      "action": "type",
      "element": "input", 
      "value": "Test Company Inc.",
      "name": "company"
    },
    {
      "action": "type",
      "element": "textarea",
      "value": "I am interested in learning more about your services.",
      "name": "message"
    },
    {
      "action": "click",
      "element": "checkbox",
      "name": "terms"
    },
    {
      "action": "click",
      "element": "button",
      "type": "submit"
    }
  ],
  "assertions": [
    {
      "type": "element",
      "selector": ".success-message",
      "condition": "Success message should be visible",
      "timeout": 10000
    },
    {
      "type": "url",
      "condition": "URL should contain thank-you",
      "pattern": "/thank-you/"
    }
  ]
}`,
    code: `import { test, expect } from '@playwright/test';

test.describe('Wakiti Landing Page Contact Form Test', () => {
  test('Test the contact form functionality', async ({ page }) => {
    // Navigate to the Wakiti website
    await page.goto('https://wakiti.com');

    // Wait for page to fully load
    await page.waitForTimeout(2000);

    // Click the contact us button to open the form
    await page.click('button[data-testid="contact-us-btn"], .contact-button, button:text-is("Contact")');

    // Wait for contact form to appear
    await page.waitForSelector('form, .contact-form, [data-testid="contact-form"]', { timeout: 5000 });

    // Fill in the form fields
    await page.type('input[name="name"], input[placeholder*="name"], #name', 'John Doe');
    await page.type('input[name="email"], input[type="email"]', 'john.doe@example.com');
    await page.type('input[name="company"], #company', 'Test Company Inc.');
    await page.type('textarea[name="message"], #message', 'I am interested in learning more about your services.');

    // Accept terms and conditions
    await page.check('input[type="checkbox"][name="terms"], .terms-checkbox');

    // Submit the contact form
    await page.click('button[type="submit"], .submit-button, button:text-is("Send")');

    // Wait for success confirmation
    await page.waitForSelector('.success-message, .thank-you, [data-testid="success"]', { timeout: 10000 });

    // Assertions
    await expect(page.locator('.success-message, .thank-you')).toBeVisible({ timeout: 10000 });
    await expect(page).toHaveURL(/thank-you/);
  });
});`
  },
  {
    id: 3,
    title: 'Raiken Examples App Test',
    description: 'Test for the Raiken examples application with form interactions.',
    category: 'ai-generated',
    difficulty: 'Beginner',
    tags: ['examples', 'app', 'forms'],
    language: 'typescript',
    userInput: `{
  "type": "ui-test",
  "name": "Raiken Examples App Test",
  "description": "Basic test for the Raiken Examples application",
  "steps": [
    {
      "action": "navigate",
      "url": "http://localhost:3002"
    },
    {
      "action": "wait",
      "ms": 2000
    },
    {
      "action": "type",
      "element": "input",
      "value": "test input",
      "id": "firstName"
    },
    {
      "action": "wait", 
      "ms": 1000
    },
    {
      "action": "click",
      "element": "button",
      "selector": "Purple button with save written on it"
    }
  ],
  "assertions": [
    {
      "type": "element",
      "selector": "inputs",
      "condition": "All the inputs should be visible",
      "timeout": 3000
    }
  ]
}`,
    code: `import { test, expect } from '@playwright/test';

test.describe('Raiken Examples App Test', () => {
  test('Basic test for the Raiken Examples application', async ({ page }) => {
    // Navigate to the application
    await page.goto('http://localhost:3002');

    // Wait for 2 seconds
    await page.waitForTimeout(2000);

    // Type "test input" into the input field with id "firstName"
    await page.getByLabel('First Name').fill('test input');

    // Wait for 1 second
    await page.waitForTimeout(1000);

    // Click the "Purple button with save written on it"
    await page.getByRole('button', { name: 'Save' }).click();

    // Assertion: All the inputs should be visible within 3 seconds
    await expect(page.getByRole('textbox')).toBeVisible({ timeout: 3000 });
  });
});`
  },
  {
    id: 4,
    title: 'Simple Navigation Test',
    description: 'Basic navigation test verifying page navigation and element visibility.',
    category: 'basic',
    difficulty: 'Beginner',
    tags: ['navigation', 'basic', 'page'],
    language: 'typescript',
    userInput: `{
  "type": "ui-test",
  "name": "Simple Navigation Test", 
  "description": "Test basic navigation by clicking a navigation link and verifying the content changes",
  "steps": [
    {
      "action": "navigate",
      "url": "http://localhost:3002"
    },
    {
      "action": "click",
      "element": "link",
      "testId": "nav-link"
    }
  ],
  "assertions": [
    {
      "type": "element",
      "selector": "text",
      "condition": "Section Content should be visible",
      "text": "Section Content"
    },
    {
      "type": "url",
      "condition": "URL should contain #section",
      "pattern": "#section"
    }
  ]
}`,
    code: `import { test, expect } from "@playwright/test";

test("simple test 2", async ({ page }) => {
  await page.goto("http://localhost:3002");
  
  // Navigate to different section
  await page.click('[data-testid="nav-link"]');
  await expect(page.getByText("Section Content")).toBeVisible();
  
  // Verify navigation worked
  await expect(page.url()).toContain('#section');
});`
  }
]

export default function ExamplesPage() {
  const [activeCategory, setActiveCategory] = useState('all')
  const [searchTerm, setSearchTerm] = useState('')
  const [copiedCode, setCopiedCode] = useState<number | null>(null)

  const filteredExamples = codeExamples.filter(example => {
    const matchesCategory = activeCategory === 'all' || example.category === activeCategory
    const matchesSearch = example.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         example.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         example.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
    return matchesCategory && matchesSearch
  })

  const copyToClipboard = async (code: string, id: number) => {
    await navigator.clipboard.writeText(code)
    setCopiedCode(id)
    setTimeout(() => setCopiedCode(null), 2000)
  }

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner': return 'bg-green-100 text-green-800 border-green-200 dark:bg-green-900/20 dark:text-green-400'
      case 'Intermediate': return 'bg-yellow-100 text-yellow-800 border-yellow-200 dark:bg-yellow-900/20 dark:text-yellow-400'
      case 'Advanced': return 'bg-red-100 text-red-800 border-red-200 dark:bg-red-900/20 dark:text-red-400'
      default: return 'bg-gray-100 text-gray-800 border-gray-200 dark:bg-gray-900/20 dark:text-gray-400'
    }
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-white via-gray-50/50 to-green-50/30 dark:from-gray-900 dark:via-gray-900/90 dark:to-gray-800">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        <div className="absolute -top-40 -right-40 w-80 h-80 bg-green-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
        <div className="absolute -bottom-40 -left-40 w-80 h-80 bg-blue-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
        <div className="absolute top-40 left-1/2 w-80 h-80 bg-purple-300 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
      </div>

      <div className="relative px-4 py-16">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-16"
        >
          <div className="inline-flex items-center px-4 py-2 rounded-full bg-gradient-to-r from-green-100 to-blue-100 dark:from-green-900/30 dark:to-blue-900/30 text-sm font-medium text-green-800 dark:text-green-300 mb-6">
            <Code className="w-4 h-4 mr-2" />
            Ready-to-Use Code Examples
          </div>
          
          <h1 className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-gray-900 via-green-800 to-blue-800 dark:from-white dark:via-green-200 dark:to-blue-200 bg-clip-text text-transparent mb-6">
            Code Examples
          </h1>
          
          <p className="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed">
            Explore real-world test examples generated by Raiken's AI. Each example shows the JSON test specification input and the generated Playwright test code - copy, paste, and adapt these patterns for your own testing needs.
          </p>
        </motion.div>

        {/* Search and Filter */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.2 }}
          className="mb-12"
        >
          <div className="flex flex-col lg:flex-row gap-6 items-center justify-between">
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Search examples..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 rounded-xl border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800 focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
              />
            </div>

            {/* Category Filter */}
            <div className="flex flex-wrap gap-2">
              {exampleCategories.map((category) => (
                <motion.button
                  key={category.id}
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => setActiveCategory(category.id)}
                  className={`flex items-center px-4 py-2 rounded-full transition-all duration-200 ${
                    activeCategory === category.id
                      ? 'bg-blue-600 text-white shadow-lg'
                      : 'bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300 hover:bg-blue-50 dark:hover:bg-gray-700 border border-gray-200 dark:border-gray-700'
                  }`}
                >
                  <category.icon className="w-4 h-4 mr-2" />
                  {category.name}
                  <span className="ml-2 text-xs opacity-75">({category.count})</span>
                </motion.button>
              ))}
            </div>
          </div>
        </motion.div>

        {/* Examples Grid */}
        <motion.div className="space-y-8">
          <AnimatePresence mode="wait">
            {filteredExamples.map((example, index) => (
              <motion.div
                key={example.id}
                initial={{ opacity: 0, y: 50 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -50 }}
                transition={{ duration: 0.5, delay: index * 0.1 }}
                className="group"
              >
                <Card className="overflow-hidden bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm border-0 shadow-xl hover:shadow-2xl transition-all duration-300">
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-3 mb-3">
                          <CardTitle className="text-xl font-bold text-gray-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors">
                            {example.title}
                          </CardTitle>
                          {example.featured && (
                            <motion.div
                              initial={{ scale: 0 }}
                              animate={{ scale: 1 }}
                              className="flex items-center px-2 py-1 bg-gradient-to-r from-yellow-400 to-orange-400 text-white text-xs font-bold rounded-full"
                            >
                              <Sparkles className="w-3 h-3 mr-1" />
                              Featured
                            </motion.div>
                          )}
                        </div>
                        <CardDescription className="text-gray-600 dark:text-gray-300 mb-4">
                          {example.description}
                        </CardDescription>
                        <div className="flex items-center gap-3 flex-wrap">
                          <Badge className={`text-xs border ${getDifficultyColor(example.difficulty)}`}>
                            {example.difficulty}
                          </Badge>
                          {example.tags.map((tag) => (
                            <Badge key={tag} variant="outline" className="text-xs">
                              {tag}
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                  </CardHeader>

                  <CardContent className="pt-0">
                    {/* User Input Section */}
                    {example.userInput && (
                      <div className="mb-4">
                        <div className="flex items-center gap-2 mb-2">
                          <Sparkles className="w-4 h-4 text-blue-600" />
                          <h4 className="font-semibold text-blue-900 dark:text-blue-100 text-sm">
                            JSON Test Specification
                          </h4>
                        </div>
                        <div className="bg-slate-900 rounded-lg p-4 border border-gray-300 dark:border-gray-600">
                          <pre className="text-sm text-green-400 overflow-x-auto">
                            <code>{example.userInput}</code>
                          </pre>
                        </div>
                      </div>
                    )}

                    <div className="relative">
                      {/* Code Header */}
                      <div className="flex items-center justify-between bg-gray-900 dark:bg-gray-950 text-white px-4 py-3 rounded-t-lg">
                        <div className="flex items-center gap-2">
                          <Terminal className="w-4 h-4" />
                          <span className="text-sm font-medium">{example.language}</span>
                          <Badge variant="outline" className="text-xs bg-green-500/10 text-green-400 border-green-500/20">
                            JSON → Playwright
                          </Badge>
                        </div>
                        <div className="flex items-center gap-2">
                          <Button
                            size="sm"
                            variant="ghost"
                            onClick={() => copyToClipboard(example.code, example.id)}
                            className="text-white hover:bg-white/10 p-2"
                          >
                            {copiedCode === example.id ? (
                              <Check className="w-4 h-4 text-green-400" />
                            ) : (
                              <Copy className="w-4 h-4" />
                            )}
                          </Button>
                          <Button
                            size="sm"
                            variant="ghost"
                            className="text-white hover:bg-white/10 p-2"
                          >
                            <PlayCircle className="w-4 h-4" />
                          </Button>
                        </div>
                      </div>

                      {/* Code Block */}
                      <div className="bg-gray-950 text-gray-100 p-4 rounded-b-lg overflow-x-auto">
                        <pre className="text-sm leading-relaxed">
                          <code>{example.code}</code>
                        </pre>
                      </div>
                    </div>

                    {/* Actions */}
                    <div className="flex items-center justify-between mt-6 pt-4 border-t border-gray-100 dark:border-gray-700">
                      <div className="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
                        <div className="flex items-center gap-1">
                          <Eye className="w-4 h-4" />
                          Live Demo
                        </div>
                        <div className="flex items-center gap-1">
                          <ExternalLink className="w-4 h-4" />
                          Open in CodeSandbox
                        </div>
                      </div>
                      <motion.div
                        whileHover={{ x: 5 }}
                        className="flex items-center text-blue-600 dark:text-blue-400 cursor-pointer"
                      >
                        <span className="text-sm font-medium mr-1">View Full Example</span>
                        <ChevronRight className="w-4 h-4" />
                      </motion.div>
                    </div>
                  </CardContent>
                </Card>
              </motion.div>
            ))}
          </AnimatePresence>
        </motion.div>

        {/* No Results */}
        {filteredExamples.length === 0 && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-16"
          >
            <Code className="w-16 h-16 mx-auto text-gray-400 mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-2">
              No examples found
            </h3>
            <p className="text-gray-600 dark:text-gray-300">
              Try adjusting your search or category filter
            </p>
          </motion.div>
        )}
      </div>
    </div>
  )
} 